AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
    functions

Globals:
    Function:
        Timeout: 10
        MemorySize: 1024
        Runtime: nodejs16.x
        Architectures:
            - x86_64

Parameters:
    UserAccessKeyLookupQueueArn:
        Type: String
    CreateUserAccessKeyQueueArn:
        Type: String
    StoreSecretsQueueArn:
        Type: String
    DynamoDBUserTableNameArn:
        Type: String
    SendEmailQueueArn:
        Type: String
    UpdatedAccessKeyAndStoredSecretSNSTopic:
        Type: String
    DeleteOldAccessKeyQueueArn:
        Type: String

Resources:
    UserLookup:
        Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
        Properties:
            FunctionName: UserLookup
            CodeUri: user-lookup/
            Handler: app.lambdaHandler
            Policies:
                - Statement:
                      - Sid: IAMListUsersPolicy
                        Effect: Allow
                        Action:
                            - iam:ListUsers
                        Resource: !Sub "arn:aws:iam::${AWS::AccountId}:user/*"
                      - Sid: SQSSendMessageToUserQueue
                        Effect: Allow
                        Action:
                            - sqs:SendMessage
                        Resource: !Ref UserAccessKeyLookupQueueArn
            Events:
                CloudWatchEvent:
                    Type: Schedule # More info about Schedule Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#schedule
                    Properties:
                        Schedule: rate(1 day)
                        Name: start-access-keys-check
                        Description: Trigger a lambda function every 24 hours to check if access keys need to be rotated
                        Enabled: True
        Metadata: # Manage esbuild properties
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Target: "es2020"
                Sourcemap: true
                EntryPoints:
                    - app.ts
    UserAccessKeyLookup:
        Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
        Properties:
            FunctionName: UserAccessKeyLookup
            CodeUri: user-access-key-lookup/
            Handler: app.lambdaHandler
            Policies:
                Statement:
                    - Sid: IAMListUserAccessKeysPolicy
                      Effect: Allow
                      Action:
                          - iam:ListAccessKeys
                      Resource: !Sub "arn:aws:iam::${AWS::AccountId}:user/*"
                    - Sid: SQSSendMessageToCheckAccessKeyAgeOfUserQueue
                      Effect: Allow
                      Action:
                          - sqs:SendMessage
                      Resource: !Ref CreateUserAccessKeyQueueArn
            Events:
                UserQueue:
                    Type: SQS # More info about Schedule Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#schedule
                    Properties:
                        Queue: !Ref UserAccessKeyLookupQueueArn
        Metadata: # Manage esbuild properties
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Target: "es2020"
                Sourcemap: true
                EntryPoints:
                    - app.ts
    CreateUserAccessKey:
        Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
        Properties:
            FunctionName: CreateUserAccessKey
            CodeUri: create-user-access-key/
            Handler: app.lambdaHandler
            Policies:
                - Statement:
                      - Sid: IAMCreateUserAccessKeyPolicy
                        Effect: Allow
                        Action:
                            - iam:CreateAccessKey
                            - iam:DeleteAccessKey
                            - iam:ListAccessKeys
                        Resource: !Sub "arn:aws:iam::${AWS::AccountId}:user/*"
                      - Sid: SQSSendMessageToStoreSecretsQueueQueue
                        Effect: Allow
                        Action:
                            - sqs:SendMessage
                        Resource: !Ref StoreSecretsQueueArn
            Events:
                UserQueue:
                    Type: SQS # More info about Schedule Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#schedule
                    Properties:
                        Queue: !Ref CreateUserAccessKeyQueueArn
        Metadata: # Manage esbuild properties
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Target: "es2020"
                Sourcemap: true
                EntryPoints:
                    - app.ts
    SendEmail:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: SendEmail
            CodeUri: send-email/
            Handler: app.lambdaHandler
            Policies:
                - Statement:
                      - Sid: SESSendEmailPolicy
                        Effect: Allow
                        Action:
                            - ses:SendEmail
                            - ses:SendRawEmail
                        Resource: "*"
                        Condition:
                            ForAllValues:StringLike:
                                ses:Recipients:
                                    - "*@rippleenergy.com"
                      - Sid: GetItemFromUserTable
                        Effect: Allow
                        Action:
                            - dynamodb:GetItem
                        Resource: !Ref DynamoDBUserTableNameArn
            Events:
                SendEmailQueue:
                    Type: SQS
                    Properties:
                        Queue: !Ref SendEmailQueueArn
        Metadata: # Manage esbuild properties
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Target: "es2020"
                Sourcemap: true
                EntryPoints:
                    - app.ts

    StoreSecrets:
        Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
        Properties:
            FunctionName: StoreSecrets
            CodeUri: store-secrets/
            Handler: app.lambdaHandler
            Policies:
                - Statement:
                      - Sid: SecretsManagerPolicy
                        Effect: Allow
                        Action:
                            - secretsmanager:GetSecretValue
                            - secretsmanager:UpdateSecret
                            - secretsmanager:CreateSecret
                            - secretsmanager:PutResourcePolicy
                        Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*"
                      - Sid: SNSSendNotificationPolicy
                        Effect: Allow
                        Action:
                            - sns:Publish
                        Resource: !Ref UpdatedAccessKeyAndStoredSecretSNSTopic #https://aws.amazon.com/premiumsupport/knowledge-center/sqs-sns-subscribe-cloudformation/
            Events:
                StoreSecretsQueue:
                    Type: SQS # More info about Schedule Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#schedule
                    Properties:
                        Queue: !Ref StoreSecretsQueueArn
        Metadata: # Manage esbuild properties
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Target: "es2020"
                Sourcemap: true
                EntryPoints:
                    - app.ts

    DeleteOldAccessKey:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: DeleteOldAccessKey
            CodeUri: delete-old-access-key/
            Handler: app.lambdaHandler
            Policies:
                Statement:
                    - Sid: ListAndDeleteOldAccessKeyPolicy
                      Effect: Allow
                      Action:
                          - iam:ListAccessKeys
                          - iam:DeleteAccessKey
                      Resource: !Sub "arn:aws:iam::${AWS::AccountId}:user/*"
            Events:
                DeleteOldAccessKeyQueue:
                    Type: SQS
                    Properties:
                        Queue: !Ref DeleteOldAccessKeyQueueArn
        Metadata: # Manage esbuild properties
            BuildMethod: esbuild
            BuildProperties:
                Minify: true
                Target: "es2020"
                Sourcemap: true
                EntryPoints:
                    - app.ts
